1. Pronic Number
Description: A number that is the product of two consecutive integers (e.g., 6 = 2×3).

Algorithm:
1. Input number n.
2. For i = 0 to square root of n:
   - If i * (i + 1) == n, then it’s a Pronic number.
--------------------------------------------------

2. Fascinating Number
Description: A number (>=100) is fascinating if the concatenation of n, n×2, and n×3 contains all digits from 1 to 9 exactly once.

Algorithm:
1. Input n.
2. Concatenate n, n×2, and n×3 as a string.
3. Check if the length is 9 and contains all digits 1-9 once.
--------------------------------------------------

3. Circular Prime Number
Description: A prime number that remains prime after rotating its digits in all possible ways.

Algorithm:
1. Check if number is prime.
2. Generate all rotations.
3. Check if each rotation is also prime.
--------------------------------------------------

4. Kaprekar Number
Description: A number whose square can be split into two parts that sum up to the original number.

Algorithm:
1. Input number n.
2. Compute n squared.
3. Split n squared into two parts and check if their sum is n.
--------------------------------------------------

5. Krishnamurthy Number
Description: A number equal to the sum of factorials of its digits.

Algorithm:
1. Input n.
2. Sum the factorials of all digits.
3. Compare the sum with n.
--------------------------------------------------

6. Evil Number
Description: A number with an even number of 1s in its binary representation.

Algorithm:
1. Convert number to binary.
2. Count 1s.
3. Check if the count is even.
--------------------------------------------------

7. Strontio Number
Description: A four-digit number where the middle two digits of n × 2 are the same as the original.

Algorithm:
1. Input 4-digit number n.
2. Calculate n × 2.
3. Check if the middle two digits match the original.
--------------------------------------------------

8. Spy Number
Description: A number where the sum and product of its digits are equal.

Algorithm:
1. Input n.
2. Compute sum and product of digits.
3. Compare sum and product.
--------------------------------------------------

9. Bubble Sort
Description: A sorting algorithm that repeatedly swaps adjacent elements if they are in the wrong order.

Algorithm:
1. For i from 0 to n-1:
   - For j from 0 to n-i-1:
     - If arr[j] > arr[j+1], swap them.
--------------------------------------------------

10. Selection Sort
Description: A sorting algorithm that selects the minimum element and moves it to the sorted part.

Algorithm:
1. For i = 0 to n-1:
   - Find min element in arr[i…n].
   - Swap with arr[i].
--------------------------------------------------

11. Symmetric Matrix
Description: A square matrix equal to its transpose.

Algorithm:
1. Input matrix.
2. Check if matrix[i][j] == matrix[j][i] for all i, j.
--------------------------------------------------

12. Transpose Matrix
Description: Flipping a matrix over its diagonal.

Algorithm:
1. Create new matrix of same size.
2. For each i, j: new[j][i] = old[i][j].
--------------------------------------------------

13. Saddle Point
Description: Element which is minimum in its row and maximum in its column.

Algorithm:
1. For each row:
   - Find min element and its column index.
   - Check if it’s the max in that column.
--------------------------------------------------

14. Cyclic Shift
Description: Shifting elements of an array (or row) in a circular fashion.
Algorithm:
1. Store last element.
2. Shift all elements right by 1.
3. Put last element in position 0.
--------------------------------------------------

15. Sorting Each Row
Description: Sorting each row of a matrix individually.
Algorithm:
1. For each row in the matrix:
   - Apply sorting algorithm (e.g., bubble sort) to the row.
--------------------------------------------------
