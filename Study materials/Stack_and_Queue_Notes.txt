Data Structures: Stack and Queue

1. Stack:
- A stack is a linear data structure that follows the Last In First Out (LIFO) principle.
- The element added last is removed first.

Operations on Stack:
- push(x): Adds element x to the top of the stack.
- pop(): Removes and returns the top element.
- peek()/top(): Returns the top element without removing it.
- isEmpty(): Checks if the stack is empty.

Stack Overflow:
- Occurs when pushing an element onto a full stack (in a fixed-size stack implementation).
- Causes a runtime error or exception.

2. Queue:
- A queue is a linear data structure that follows the First In First Out (FIFO) principle.
- The element added first is removed first.

Operations on Queue:
- enqueue(x): Adds element x to the rear of the queue.
- dequeue(): Removes and returns the front element.
- front(): Returns the front element without removing it.
- isEmpty(): Checks if the queue is empty.

Queue Overflow:
- Occurs when enqueuing an element into a full queue (in a fixed-size queue).
- Causes a runtime error or exception.

Both structures are commonly used in algorithm design and real-world applications like task scheduling and memory management.
